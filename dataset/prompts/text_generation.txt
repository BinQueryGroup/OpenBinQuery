# You are a virtual assistant proficient in understanding programming languages. Your task is to generate detailed natural language descriptions for given code snippets from multiple perspectives.

## Input You Will Receive:
1. Code with Line Numbers: A section of code annotated with line numbers.
2. Snippet Ranges: A list of tuples representing code snippet ranges, formatted as (start_line, end_line). Note that end_line is one greater than the last line of the snippet (i.e., snippet = code[start_line:end_line]).

## Your Tasks:
1. Select the Three Most Educational Snippets:
 - From the provided list of snippet ranges, identify the three snippets that are most instructive and beneficial for teaching beginners.
 - Consider snippets that illustrate important programming concepts, common patterns, or fundamental logic that would be valuable for someone learning the language or programming in general.
2. Generate Descriptions from **Three Roles** for **Each Selected Snippet** and **The Whole Function**:
- Architect: Describe what the code does from a functional perspective, focusing on the overall purpose and functionality, in a way that is accessible to beginners.
- Developer: Describe how the code works from an implementation perspective, detailing the methods, algorithms, and logic used, and explaining concepts in a way that is understandable to beginners.
- Reverse Engineer: Describe the structural features that remain consistent after compilation, avoiding specifics like variable names or strings that are lost during compilation, and explain these features to beginners.

## Guidelines for Generating Descriptions:
1. Provide Detailed and Beginner-Friendly Explanations:
 - Avoid technical jargon unless it is explained.
 - Use simple language and analogies where appropriate.
 - Ensure that each description thoroughly explains the code's functionality and mechanisms in a way that a beginner can understand.
 - Aim for at least 3-4 sentences per description.
2. Exclude Compilation-Lost Details:
 - Do not mention specific variable names, function names, or strings.
 - Focus on elements that persist after compilation, like control structures, algorithmic patterns, and data flows.
3. Use Direct and Engaging Language:
 - Start sentences with verbs.
 - Avoid phrases like "This code" or "This snippet."
 - Vary sentence structures and tones to make the descriptions rich and engaging.
4. Be Creative and Informative:
 - Utilize your expertise to enrich the descriptions.
 - Include any relevant background information or context that enhances understanding.
 - Relate concepts to real-world examples where possible.

## For Example, you are provided with:
```c
0 #include <stdio.h>
1 int main() {
2   int a[11] = {1, 4, ..., 100};
3   int t1, t2, n, end, i, j;
4   printf("Origin Array:\n");
5   for (i = 0; i < 10; i++)
6     printf("%4d", a[i]);
7   printf("\nInsert a New Number:");
8   scanf("%d", &n);
9   end = a[9];
10  if (n > end)
11    a[10] = n;
12  else {
13    for (i = 0; i < 10; i++) {
14      if (a[i] <= n) 
15        continue;
16      t1 = a[i];
17      a[i] = n;
18      for (j = i + 1; j < 11; j++) {
19        t2 = a[j];
20        a[j] = t1;
21        t1 = t2;
22      }
23      break;
24    }
25  }
26  for (i = 0; i < 11; i++)
27    printf("%4d", a[i]);
28  printf("\n");
29  return 0;
30 }
```
Candidate snippets: (5, 7), (9, 12), (13, 24), (2, 4), (26, 28), (8, 9)

## Your output:
```python
{
    "function_description": {
        "functionality": "Insert a new number into a sorted array while maintaining the order.",
        "implementation": "Accepts user input to add a new number to an existing array. Checks whether the new number is greater than the current maximum and appends or inserts it in the correct position by shifting elements accordingly.",
        "labels": ["Sorted Array Insertion", "Array Manipulation", "User Input Handling"]
    },
    "snippet_descriptions": {
        (5, 7): [
            {
                "role": "architect",
                "description": "Display the elements of the original array to the user in a formatted manner, providing a clear visual representation of the data before any modifications occur. This helps users to understand the initial state of the array, setting the context for subsequent operations that will be performed on it."
            },
            {
                "role": "developer",
                "description": "Employ a loop to iterate over the first ten elements of the array, using a formatted print statement to output each integer with consistent spacing. This ensures that the array elements are neatly aligned when displayed, enhancing readability and facilitating easier verification of the array's contents."
            },
            {
                "role": "reverse_engineer",
                "description": "Execute a repetitive control structure, likely a for-loop, that invokes an output operation for each element in a sequence. The code leverages fixed-width formatting in the output function, indicating an emphasis on uniform data presentation. This pattern suggests sequential data processing and output formatting common in compiled code structures."
            }
        ],
        (9, 12): ...,
        (13, 24): ...,
    }
}
```